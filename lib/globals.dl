; Special thanks to buildyourownlisp.com for the inspiration from 'lispy'!

(def {pi}  3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37510_58209_74944_59230_78164_06286_20899_86280_34825_34211_70679_82148_08651_32823_06647_09384)
(def {e}   2.71828_18284_59045_23536_02874_71352_66249_77572_47093_69995)
(def {phi} 1.61803_39887_49894_84820_45868_34365_63811_77203_09179_80576)

(def {fun local-fun}
  (fn {a b} {def (head a) (fn (tail a) b)})
  (fn {a b} {set (head a) (fn (tail a) b)}))

(fun {cons a b}      {join (list a) b})

; Helpers
(fun {nil? a}   {eq a NIL})
(fun {t? a}     {eq a T})
(fun {zero? a}  {eq a 0})
(fun {neg? a}   {< a 0})
(fun {pos? a}   {< 0 a})
(fun {one? a}   {eq a 1})

; Comparisons
(fun {>= a b}   {< b a})
(fun {<= a b}   {> b a})
(fun {not a}    {if a {NIL} {T}})
(def {== <> !=} eq neq neq)

; Logical operators
(fun {or a b} {
  if a {T} {
    if b {T}
  }
})

(fun {and a b} {
  if a {
    if b {T} {NIL}
  }
})

(fun {xor a b} {
  and (or a b) (not (and a b))
})

; Currying
(fun {unpack f l}  {eval (cons f l)})
(fun {pack f}      {f &_})

(def {apply curry uncurry} unpack unpack pack)

; Reverse
(fun {reverse} {
  if &1 
    {join (reverse (tail &1)) (head &1)}
})

; nth element 
(fun {fst l} {eval (head l)})
(fun {snd l} {eval (head (tail l))})
(fun {thd l} {eval (head (tail (tail l)))})

(fun {nth n l} {
  if (zero? n)
    {fst l}
    {nth (- n 1) (tail l)}
})

(fun {len} {
  if &1
    {+ 1 (len (tail &1))}
    {0}
})

(fun {last l} {nth (- (len l) 1) l})

; Take N items
(fun {take n l} {
  if (not (zero? n))
    {join (head l) (take (- n 1) (tail l))}
})

; Drop N items
(fun {drop n l} {
  if (zero? n)
    {l}
    {drop (- n 1) (tail l)}
})

; Split at N
(fun {split n l} {list (take n l) (drop n l)})

(fun {elem x l} {
  if l
    {if (eq x (fst l)) {T} {elem x (tail l)}}
})

; create a private scope
(fun {let x} {((fn NIL x) ())})

; do a number of items and return value of the last one
(fun {do} {if &_ {last &_}})

(def {begin} do)
(def {block} do)

; helpers
(fun {flip f a b} {f b a})
(fun {ghost}      {eval &_})
(fun {comp f g x} {f (g x)}) ; Compose

; map
(fun {map f l} {
  if l
    {cons (f (fst l)) (map f (tail l))}
})

; filter
(fun {filter f l} {
  if l
    {join (if (f (fst l)) {head l} {NIL}) (filter f (tail l))}
})

; fold left
(fun {foldl f z l} {
  if l
    {foldl f (f z (fst l)) (tail l)}
    {z}
})

(fun {sum s}     {foldl + 0 s})
(fun {product p} {foldl * 1 p})

; Switch/Cond
(fun {cond} {
  if &_
    {if (fst (fst &_))
      {snd (fst &_)}
      {apply cond (tail &_)} }
    {error "Selection not found"}
})

;(def {switch} cond)

(fun {case x} {
  if &_
    {if (eq x (fst (fst &_)))
       {snd (fst &_)}
       {apply case (cons x (tail &_))}}
    {error "Case not found"}
})
