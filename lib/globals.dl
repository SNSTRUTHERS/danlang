; Special thanks to buildyourownlisp.com for the inspiration from 'lispy'!
:(math.pi    3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37510_58209_74944_59230_78164_06286_20899_86280_34825_34211_70679_82148_08651_32823_06647_09384)
:(math.e     2.71828_18284_59045_23536_02874_71352_66249_77572_47093_69995)
:(math.phi   1.61803_39887_49894_84820_45868_34365_63811_77203_09179_80576)
:(math.gamma 0.57721_56649_01532_86061)

; function definition
:(fun       @({a b} :{^(a) @($(a) b)}))

; join a single element to the front of a list
(fun {cons a b} |{'(a) b})

; create a private scope
(fun {let x} {(@({} x))})

; composition helpers
(fun {flip f a b} {f b a})
(fun {ghost}      !{&_})
(fun {comp f g x} {f (g x)}) ; Compose

; comparisons
(fun {not a}  ?{a NIL T})
(fun {>= a b} {not (< a b)})
(fun {<= a b} {not (> a b)})
(fun {== a b} {eq a b})
(fun {neg? a} {< a 0})
(fun {pos? a} {< 0 a})

:({<> !=} neq neq)

; test helpers
:(nil?   (== NIL))
:(t?     (== T))
:(zero?  (== 0))
:(one?   (== 1))
:({=0 =1}  zero? one?)
:({0? 1?}  zero? one?)

; logical operators
(fun {xor a b} {and (or a b) (not (and a b))})

; math helper functions
(fun {1+ n}     {+ n 1})
(fun {1- n}     {- n 1})
(fun {>=0 n}    {>= n 0})
(fun {<=0 n}    {<= n 0})
(fun {>0 n}     {> n 0})
(fun {<0 n}     {< n 0})
(fun {!=0 n}    {not (zero? n)})
(fun {!=1 n}    {not (one? n)})
(fun {square n} {* n n})
(fun {cube n}   {* n (square n)})
(fun {recip n}  {/ 1 n})

:(inverse recip)
:(trunc truncate)

; currying
(fun {unpack f l}  !{(cons f l)})
(fun {pack f}      {f &_})

:({apply curry uncurry} unpack unpack pack)

; reverse
(fun {reverse} ?{
  (and (defined? &1)
  (qexpr? &1) &1)
  |((reverse $(&1)) ^(&1))
})

; nth element 
(fun {fst l} {eval ^(l)})
(fun {snd l} {eval ^($(l))})
(fun {thd l} {eval ^($($(l)))})

; zero-based element of list (evaluated)
(fun {nth n l} ?{
  (zero? n)
  (fst l)
  (nth (1- n) $(l))
})

:({first second third fourth fifth sixth seventh eighth ninth tenth}
  (nth 0) (nth 1) (nth 2) (nth 3) (nth 4) (nth 5) (nth 6) (nth 7) (nth 8) (nth 9))

(fun {last l} {nth (1- (len l)) l})

; coalescing operator to find first non-nil argument in the list
(fun {?? a} ?{a a ?(&_ .(?? &_))})

; take n items
(fun {take n l} ?{
  (!=0 n)
  |(^(l) (take (1- n) $(l)))
})

; drop n items
(fun {drop n l} ?{
  (zero? n)
  l
  (drop (1- n) $(l))
})

:(skip drop)

; split list at N
(fun {split n l} '{(take n l) (drop n l)})

; is x in l?
(fun {elem? x l} ?{
  l
  ?((eq x (fst l)) T (elem? x $(l)))
})

(fun {has-element? l x} {elem? x l})

; do a number of items and return value of the last one
(fun {do} ?{&_ (last &_)})

:(begin do)
:(block do)

; map
(fun {map f l} ?{
  l
  (cons (f (fst l)) (map f $(l)))
})

; filter
(fun {filter f l} ?{
  l
  |(?((f (fst l)) ^(l) NIL) (filter f $(l)))
})

; fold left
(fun {foldl f z l} ?{
  l
  (foldl f (f z (fst l)) $(l))
  z
})

(fun {sum s}     {foldl + 0 s})
(fun {avg s}     {/ (sum s) (len s)})
(fun {product p} {foldl * 1 p})

(fun {min} {foldl @(NIL ?{(< &1 &2) &1 &2}) (fst &_) $(&_)})
(fun {max} {foldl @(NIL ?{(> &1 &2) &1 &2}) (fst &_) $(&_)})

; Switch/Cond
(fun {cond} ?{
  &_
  ?((fst (fst &_))
    (snd (fst &_))
    .(cond $(&_)))
  (error "Selection not found")
})

;:(switch cond)

(fun {case x} ?{
  &_
  ?((eq x (fst (fst &_)))
    (snd (fst &_))
    .(case (cons x $(&_))))
  (error "Case not found")
})

; math functions
(fun {abs a} ?{
  (num? a)
  ((<0 a) (- a) a)
  (error "Cannot perform 'abs' on non-number")
})

(fun {floor a} {
  let {
    do
      =(tr (trunc a))
      (<=> (cmp a tr) {< (1- tr)} {tr})
  }
})

(fun {ceil a} {
  let {
    do
     =(tr (trunc a))
     (<=> (cmp a tr) {> (1+ tr)} {tr})
  }
})

(fun {div a b} ?{
  (and (num? a) (num? b))
  (trunc (/ a b))
  (error "Cannot perform 'div' on non-numbers")
})

(fun {mod a b} ?{
  (and (num? a) (num? b))
  (- a (* b (floor (/ a b))))
  (error "Cannot perform 'mod' on non-numbers")
})

:(% mod)

(fun {divmod a b} ?{
  (and (num? a) (num? b))
  (cons (div a b) (list (mod a b)))
  (error "Cannot perform 'divmod' on non-numbers")
})

(fun {fdiv a b} ?{
  (and (num? a) (num? b))
  (to-fixed (/ a b) ?((and (defined? &3) (num? &3)) &3 10))
  {error "Cannot perform 'fdiv' on non-numbers"}
})

(fun {frecip n} ?{(defined? &2) (fdiv 1 n &2) (fdiv 1 n)})
:(finverse frecip)

(fun {odd? n} ?{
  (num? n)
  (=1 (mod n 2))
  (error "Cannot perform 'odd?' on non-number")
})

(fun {even? n} ?{
  (num? n)
  (=0 (mod n 2))
  (error "Cannot perform 'even?' on non-number")
})

(fun {positive? a} ?{(num? a) (pos? a) (error "Only numbers can be positive")})
(fun {negative? a} ?{(num? a) (neg? a) (error "Only numbers can be negative")})

:({+? -? 0?} positive? negative? zero?)

(fun {pow a b} ?{
  (-? b)
  (/ 1 (pow a (- b)))
  ?((zero? b)
    1
    ?((even? b)
      (* (pow a (/ b 2)) (pow a (/ b 2)))
      (* a (pow a (1- b)))
    )
  )
})

(fun {minimum} .{min &1})
(fun {maximum} .{max &1})

; String helpers
(fun {starts-with? s sub} {=0 (index-of s sub)})
(fun {ends-with?   s sub} {eq (len s) (+ (last-index-of s sub) (len sub))})
(fun {contains?    s sub} {>=0 (index-of s sub)})

; Repeat
(fun {repeat n d} ?{(=0 n) NIL (cons !(d) (roll (1- n) d))})
:(times repeat)

; Dice
(fun {die+ sides mod}    {+ 1 mod (random sides)})
(fun {die sides}         {die+ sides 0})

(fun {d3+ m} {die+ 3 m})
(fun {d3} {d3+ 0})
(fun {d4+ m} {die+ 4 m})
(fun {d4} {d4+ 0})
(fun {d6+ m} {die+ 6 m})
(fun {d6} {d6+ 0})
(fun {d8+ m} {die+ 8 m})
(fun {d8} {d8+ 0})
(fun {d10} {die+ 10 0})
(fun {d10} {d10+ 0})
(fun {d12+ m} {die+ 12 m})
(fun {d12} {d12+ 0})
(fun {d20+ m} {die+ 20 m})
(fun {d20} {d20+ 0})
(fun {d24+ m} {die+ 24 m})
(fun {d24} {d24+ 0})
(fun {d30+ m} {die+ 30 0})
(fun {d30} {d30+ 0})
(fun {d60+ m} {die+ 60 m})
(fun {d60} {d60+ 0})
(fun {d100+ m} {die+ 100 m})
(fun {d100} {d100+ 0})

(fun {dice+ n sides mod} ?{(=0 n) mod (+ (die sides) (dice+ (1- n) sides mod))})
(fun {dice n sides}      {dice+ n sides 0})
:(roll repeat)
(fun {sumrolls d} ?{
  d
  (+
    (let {
      do
        =(hd (fst d))
        (cond
          {(num? hd) (die hd)}
          {(qexpr? hd)
            (case (len hd) 
              {1 .(die hd)}
              {2 .(dice hd)}
              {3 .(dice+ hd)}
            )
          }
        )
    })
    (sumrolls $(d))
  )
  0
})

(fun {special-die sides cases} .{case (cons (die sides) cases)})

; open ended dice rolls
(fun {oe-die+ sides mod} {
  do
    =(rl (die+ sides 0))
    ?((eq rl sides) (+ sides (oe-die+ sides mod)) (+ rl mod))
})
(fun {oe-die sides}         {oe-die+ sides 0})
(fun {oe-dice+ n sides mod} ?{(=0 n) mod (+ (oe-die sides) (oe-dice+ (1- n) sides mod))})
(fun {oe-dice n sides}      {oe-dice+ n sides 0})

; sort and related
(fun {in?} ?{&2 (or (eq &1 (fst &2)) (in? &1 $(&2)))})
(fun {remove-fst f l} ?{
  l
  (do
    =(hd (fst l))
    =(tl $(l))
    ?(
      (eq f hd)
      tl
      ?(
        tl
        (cons hd (remove-fst f tl))
      )
    )
  )
})

(fun {remove-min} {remove-fst .(min &1) &1})
(fun {remove-max} {remove-fst .(max &1) &1})

(fun {remove-all f l} ?{
  l
  (do
    =(hd (fst l))
    =(tl $(l))
    ?(
      (eq f hd)
      (remove-all f tl)
      ?(
        tl
        (cons hd (remove-all f tl))
      )
    )
  )
})

(fun {sort} ?{&1 (cons .(min &1) (sort (remove-min &1)))})
(fun {sort-desc} ?{&1 (cons .(max &1) (sort-desc (remove-max &1)))})

(fun {best-of n l} {take n (sort-desc l)})
(fun {worst-of n l} {take n (sort l)})

:({top bottom} best-of worst-of)

(fun {between?} ?{(< &1 &2) (and (>= &3 &1) (<= &3 &2)) (between? &2 &1 &3)})
:(><? between?)
(fun {not-between?} {not (between? &1 &2 &3)})
:(!><? not-between?)

(fun {all-between?} ?{&3 (and (between? &1 &2 (fst &3)) (all-between? &1 &2 $(&3))) T})
:(*><? all-between?)

(fun {all-not-between?} ?{&3 (and (not-between? &1 &2 (fst &3)) (all-not-between? &1 &2 $(&3))) T})
:(*!><? all-not-between?)

(fun {not-all-between?} {not (all-between? &1 &2 &3)})
:(!*><? not-all-between?)

(fun {best-of-rolls a b f} {best-of a (roll b f)})
(fun {worst-of-rolls a b f} {worst-of a (roll b f)})

(fun {dnd-attr-rolls} ?{(defined? &1) (roll &1 {do =(rls (sort-desc (roll 8 {sum (best-of-rolls 3 4 {d6})}))) |((take 5 rls) (skip 7 rls))}) (dnd-attr-rolls 1)})
(fun {dnd-attr-rolls-detailed} ?{(defined? &1) (roll &1 {do =(rls (sort-desc (roll 8 {do =(rs (sort-desc (roll 4 {d6}))) '((sum (take 3 rs)) rs)}))) |((take 5 rls) (skip 7 rls))}) (dnd-attr-rolls-detailed 1)})
