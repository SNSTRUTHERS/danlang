=({h} (hash-create))
(hash-put h {:a "Hello, World!"}) ; add a single item
(hash-put h {:b 10} {:f @({} {hash-get &0 :a})})
(hash-get h :a)
(hash-make-private h :a)
(print (hash-get h :a)) ; get an error
(print (hash-call h :f)) ; get the same value, but this time it works!

=({h-clone}
  (hash-clone h {
    {:a "Hello, Clone World!"}
    {:b 15}
  })
)

?((eq (hash-call h-clone :f) "Hello, Clone World!")
  {print "Clone worked!"}
  {error "Clone failed :("}
)

?((eq (hash-call h :f) "Hello, World!")
  {print "Clone didn't corrupt the original!"}
  {error "Clone corrupted the original :("}
)

; clone of hash with child hash
(hash-put h-clone {
  :h (hash-create {
    {:a 100 :__private}
    {:a-get @({}  {hash-get &0 :a})}
    {:a-put @({v} {hash-put &0 {:a v}})}
  })
})

(print (hash-get (hash-get h-clone :h) :a)) ; should fail
(print (hash-call (hash-get h-clone :h) :a-get)) ; should work
(print (hash-put (hash-get h-clone :h) :a 1000)) ; should fail
(print (hash-call (hash-get h-clone :h) :a-put 1000)) ; should work

=({h-clone2} (hash-clone h-clone))
(print (hash-get (hash-get h-clone2 :h) :a)) ; should still fail
(print (hash-call (hash-get h-clone2 :h) :a-get)) ; should work
(print (hash-call (hash-get h-clone2 :h) :a-put 2000)) ; should work

; test that the cloned child hashes are distinct
?(
  (and
    (eq (hash-call (hash-get h-clone  :h) :a-get) 1000)
    (eq (hash-call (hash-get h-clone2 :h) :a-get) 2000)
  )
  {print "Child clone worked"}
  {error "Child clone failed"}
)
